service:
  name: CritickerOverhaul

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-s3-deploy
  - serverless-cloudfront-invalidate # must be last plugin

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    GAME_TABLE_NAME: ${self:custom.GameTable.name}
    STUDENT_TABLE_NAME: ${self:custom.StudentTable.name}
    GAME_BUCKET_NAME: ${self:custom.GameBucket.name}
    REACT_BUCKET_NAME: ${self:custom.ReactBucket.name}
    AUTH0_PUBLIC_KEY: ${file(secret.pem)}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iam:
    role:
      statements:
        - ${file(aws/iam/GameTableIAM.yml):GameTableIAM}
        - ${file(aws/iam/StudentTableIAM.yml):StudentTableIAM}
        - ${file(aws/iam/GameBucketIAM.yml):GameBucketIAM}
        - ${file(aws/iam/ReactBucketIAM.yml):ReactBucketIAM}
  lambdaHashingVersion: 20201221
functions:
  auth:
    handler: aws/handlers/auth.handler
  publicEndpoint:
    handler: aws/handlers/public.handler
    events:
      - http:
          path: public
          method: POST
          cors: true
  privateEndpoint:
    handler: aws/handlers/private.handler
    events:
      - http:
          path: private
          method: POST
          authorizer: auth
          cors: true
  setReviewPicture:
    handler: aws/handlers/setReviewPicture.handler
    events:
      - http:
          method: PATCH
          path: review/{slug}/picture
          authorizer: ${self:custom.authorizer}
          cors: true
  getAllReviews:
    handler: aws/handlers/getAllReviews.handler
    events:
      - http:
          method: GET
          path: getreviews
          cors: true
  getReview:
    handler: aws/handlers/getReview.handler
    events:
      - http:
          method: GET
          path: review/{slug}
          cors: true
  signup:
    handler: aws/handlers/signup.handler
    events:
      - http:
          method: POST
          path: signup
          cors: true
  login:
    handler: aws/handlers/login.handler
    events:
      - http:
          method: POST
          path: login
          cors: true
  deleteAccount:
    handler: aws/handlers/deleteAccount.handler
    events:
      - http:
          method: DELETE
          path: deleteAccount
          authorizer: auth
          cors: true
resources:
  Resources:
    GameTable: ${file(aws/resources/GameTable.yml):GameTable}
    StudentTable: ${file(aws/resources/StudentTable.yml):StudentTable}
    GameBucket: ${file(aws/resources/GameBucket.yml):GameBucket}
    GameBucketPolicy: ${file(aws/resources/GameBucket.yml):GameBucketPolicy}
    ReactBucket: ${file(aws/resources/ReactBucket.yml):ReactBucket}
    ReactBucketPolicy: ${file(aws/resources/ReactBucket.yml):ReactBucketPolicy}
    # Cloudfront
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity for ${self:provider.stage} React Bucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            Compress: true
            ForwardedValues:
              QueryString: false
            TargetOriginId: ${self:custom.ReactBucketTargetOrigin.name}
            ViewerProtocolPolicy: 'redirect-to-https'
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - ReactBucket
                  - DomainName
              Id: ${self:custom.ReactBucketTargetOrigin.name}
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - origin-access-identity/cloudfront/
                      - Ref: CloudFrontOriginAccessIdentity
    # This response is needed for custom authorizer failures cors support
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:FinalYearProject-${self:provider.stage}-auth
  GameTable:
    name: !Ref GameTable
    arn: !GetAtt GameTable.Arn
  StudentTable:
    name: !Ref StudentTable
    arn: !GetAtt StudentTable.Arn
  GameBucket:
    name: game-bucket-xw23me9x-${self:provider.stage}
  ReactBucket:
    name: react-bucket-t6aius2j-${self:provider.stage}
  BucketFolder:
    name: FinalYearProject
  ReactBucketTargetOrigin:
    name: S3-${self:custom.ReactBucket.name}/${self:custom.BucketFolder.name}
  bundle:
    linting: true
  cloudfrontInvalidate:
    - distributionId: 'E3T9EZCT20HC4E'
      autoInvalidate: true
      items:
        - '/*'
