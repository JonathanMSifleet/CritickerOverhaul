service:
  name: AWSReviewWebsite

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-s3-deploy

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  memorySize: 256
  provider.apiGateway.shouldStartNameWithService: true
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    REVIEW_TABLE_NAME: ${self:custom.ReviewTable.name}
    USER_TABLE_NAME: ${self:custom.UserTable.name}
    REVIEW_BUCKET_NAME: ${self:custom.ReviewBucket.name}
    ANGULAR_BUCKET_NAME: ${self:custom.AngularBucket.name}
    AUTH0_PUBLIC_KEY: ${file(secret.pem)}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - ${file(aws/iam/ReviewTableIAM.yml):ReviewTableIAM}
    - ${file(aws/iam/UserTableIAM.yml):UserTableIAM}
    - ${file(aws/iam/ReviewBucketIAM.yml):ReviewBucketIAM}
    - ${file(aws/iam/AngularBucketIAM.yml):AngularBucketIAM}
functions:
  auth:
    handler: aws/handlers/auth.handler
  publicEndpoint:
    handler: aws/handlers/public.handler
    events:
      - http:
          path: public
          method: POST
          cors: true
  privateEndpoint:
    handler: aws/handlers/private.handler
    events:
      - http:
          path: private
          method: POST
          authorizer: auth
          cors: true
  setReviewPicture:
    handler: aws/handlers/setReviewPicture.handler
    events:
      - http:
          method: PATCH
          path: review/{slug}/picture
          authorizer: ${self:custom.authorizer}
          cors: true
  getAllReviews:
    handler: aws/handlers/getAllReviews.handler
    events:
      - http:
          method: GET
          path: getreviews
          cors: true
  getReview:
    handler: aws/handlers/getReview.handler
    events:
      - http:
          method: GET
          path: review/{slug}
          cors: true
  signup:
    handler: aws/handlers/signup.handler
    events:
      - http:
          method: POST
          path: signup
          cors: true
  login:
    handler: aws/handlers/login.handler
    events:
      - http:
          method: POST
          path: login
          cors: true
  deleteAccount:
    handler: aws/handlers/deleteAccount.handler
    events:
      - http:
          method: DELETE
          path: deleteAccount
          authorizer: auth
          cors: true
resources:
  Resources:
    ReviewTable: ${file(aws/resources/ReviewTable.yml):ReviewTable}
    UserTable: ${file(aws/resources/UserTable.yml):UserTable}
    ReviewBucket: ${file(aws/resources/ReviewBucket.yml):ReviewBucket}
    ReviewBucketPolicy: ${file(aws/resources/ReviewBucket.yml):ReviewBucketPolicy}
    AngularBucket: ${file(aws/resources/AngularBucket.yml):AngularBucket}
    AngularBucketPolicy: ${file(aws/resources/AngularBucket.yml):AngularBucketPolicy}
    # Cloudfront
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity for ${self:provider.stage} Angular Bucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            Compress: true
            ForwardedValues:
              QueryString: false
            TargetOriginId: ${self:custom.AngularBucketTargetOrigin.name}
            ViewerProtocolPolicy: 'redirect-to-https'
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - AngularBucket
                  - DomainName
              Id: ${self:custom.AngularBucketTargetOrigin.name}
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - origin-access-identity/cloudfront/
                      - Ref: CloudFrontOriginAccessIdentity
    # This response is needed for custom authorizer failures cors support
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:AWSReviewWebsite-${self:provider.stage}-auth
  ReviewTable:
    name: !Ref ReviewTable
    arn: !GetAtt ReviewTable.Arn
  UserTable:
    name: !Ref UserTable
    arn: !GetAtt UserTable.Arn
  ReviewBucket:
    name: review-bucket-w3ygx8fd-${self:provider.stage}
  AngularBucket:
    name: angular-bucket-j5zca3nz-${self:provider.stage}
  BucketFolder:
    name: AWSReviewWebsite
  AngularBucketTargetOrigin:
    name: S3-${self:custom.AngularBucket.name}/${self:custom.BucketFolder.name}
  bundle:
    linting: true
