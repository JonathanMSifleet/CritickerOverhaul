service: CritickerOverhaul
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-cloudfront-invalidate # must be last plugin

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    AVATAR_TABLE_NAME: ${self:custom.AvatarTable.name}
    FILMS_TABLE_NAME: ${self:custom.FilmsTable.name}
    RATINGS_TABLE_NAME: ${self:custom.RatingsTable.name}
    REACT_BUCKET_NAME: ${self:custom.ReactBucket.name}
    USER_TABLE_NAME: ${self:custom.UserTable.name}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iam:
    role:
      statements:
        - ${file(aws/iam/AvatarTableIAM.yml):AvatarTableIAM}
        - ${file(aws/iam/FilmsTableIAM.yml):FilmsTableIAM}
        - ${file(aws/iam/RatingsTableIAM.yml):RatingsTableIAM}
        - ${file(aws/iam/UserTableIAM.yml):UserTableIAM}

package:
  individually: true

functions:
  addActors:
    handler: aws/handlers/migration/addActors.handler
    events:
      - http:
          method: PUT
          path: migration/addActors
          cors: true
  addDirectors:
    handler: aws/handlers/migration/addDirectors.handler
    events:
      - http:
          method: PUT
          path: migration/addDirectors
          cors: true
  addWriters:
    handler: aws/handlers/migration/addWriters.handler
    events:
      - http:
          method: PUT
          path: migration/addWriters
          cors: true
  deleteAccount:
    handler: aws/handlers/deleteAccount.handler
    events:
      - http:
          method: DELETE
          path: deleteAccount
          cors: true
  deleteRating:
    handler: aws/handlers/deleteRating.handler
    events:
      - http:
          method: DELETE
          path: rating/deleteRating/{imdbID}/{username}
          cors: true
  getAllRatings:
    handler: aws/handlers/getAllRatings.handler
    timeout: 30
    events:
      - http:
          method: GET
          path: rating/getAllRatings/{username}
          cors: true
      - http:
          method: GET
          path: rating/getAllRatings/{username}/{lastEvaluatedKey}
          cors: true
  getFilmDetails:
    handler: aws/handlers/getFilmDetails.handler
    events:
      - http:
          method: GET
          path: getFilmDetails/{id}
          cors: true
  getFilms:
    handler: aws/handlers/getFilms.handler
    events:
      - http:
          method: GET
          path: getFilms
          cors: true
  getNumberOfRatings:
    handler: aws/handlers/getNumberOfRatings.handler
    events:
      - http:
          method: GET
          path: rating/getNumberOfRatings/{username}
          cors: true
  getProfileByUsername:
    handler: aws/handlers/getProfileByUsername.handler
    events:
      - http:
          method: GET
          path: user/profile/{username}
          cors: true
  getUserAvatar:
    handler: aws/handlers/getUserAvatar.handler
    events:
      - http:
          method: GET
          path: user/avatar/{username}
          cors: true
  getRecentRatings:
    handler: aws/handlers/getRecentRatings.handler
    events:
      - http:
          method: GET
          path: rating/getRecentRatings/{username}
          cors: true
  getUserRating:
    handler: aws/handlers/getUserRating.handler
    events:
      - http:
          method: GET
          path: rating/getUserRating/{imdbID}/{username}
          cors: true
  importFilmBatch:
    handler: aws/handlers/migration/importFilmBatch.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: migration/importFilmBatch
          cors: true
  importRatings:
    handler: aws/handlers/importRatings.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: rating/importRatings/{username}
          cors: true
  login:
    handler: aws/handlers/login.handler
    events:
      - http:
          method: POST
          path: login
          cors: true
  rateFilm:
    handler: aws/handlers/rateFilm.handler
    events:
      - http:
          method: POST
          path: rating/rateFilm/{username}
          cors: true
  signup:
    handler: aws/handlers/signup.handler
    events:
      - http:
          method: POST
          path: signup
          cors: true
  updateUserProfile:
    handler: aws/handlers/updateUserProfile.handler
    events:
      - http:
          method: PUT
          path: user/profile/{username}
          cors: true
  uploadUserAvatar:
    handler: aws/handlers/uploadUserAvatar.handler
    events:
      - http:
          method: POST
          path: user/avatar/{username}
          cors: true
  publicEndpoint:
    handler: aws/handlers/public.handler
    events:
      - http:
          path: public
          method: POST
          cors: true
  privateEndpoint:
    handler: aws/handlers/private.handler
    events:
      - http:
          path: private
          method: POST
          cors: true
resources:
  Resources:
    # Buckets:
    ReactBucket: ${file(aws/resources/ReactBucket.yml):ReactBucket}
    # Tables:
    AvatarTable: ${file(aws/resources/AvatarTable.yml):AvatarTable}
    FilmsTable: ${file(aws/resources/FilmsTable.yml):FilmsTable}
    RatingsTable: ${file(aws/resources/RatingsTable.yml):RatingsTable}
    UserTable: ${file(aws/resources/UserTable.yml):UserTable}
    # Bucket policies:
    ReactBucketPolicy: ${file(aws/resources/ReactBucket.yml):ReactBucketPolicy}
    # Cloudfront:
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity for ${self:provider.stage} React Bucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: 'Criticker Overhaul distribution'
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            Compress: true
            DefaultTTL: 86400
            ForwardedValues:
              QueryString: true
            TargetOriginId: ${self:custom.ReactBucketTargetOrigin.name}
            ViewerProtocolPolicy: 'redirect-to-https'
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - ReactBucket
                  - DomainName
              Id: ${self:custom.ReactBucketTargetOrigin.name}
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - origin-access-identity/cloudfront/
                      - Ref: CloudFrontOriginAccessIdentity
    # This response is needed for custom authorizer failures cors support
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

custom:
  AvatarTable:
    name: !Ref AvatarTable
    arn: !GetAtt AvatarTable.Arn
  FilmsTable:
    name: !Ref FilmsTable
    arn: !GetAtt FilmsTable.Arn
  UserTable:
    name: !Ref UserTable
    arn: !GetAtt UserTable.Arn
  RatingsTable:
    name: !Ref RatingsTable
    arn: !GetAtt RatingsTable.Arn
  ReactBucket:
    name: react-bucket-x3blze4m-${self:provider.stage}
  BucketFolder:
    name: CritickerOverhaul
  ReactBucketTargetOrigin:
    name: S3-${self:custom.ReactBucket.name}/${self:custom.BucketFolder.name}
  bundle:
    linting: true
  cloudfrontInvalidate:
    - distributionId: 'E25ASI4SIUBGJK'
      autoInvalidate: true
      items:
        - '/*'
  webpack:
    webpackConfig: ./webpack.config.js
