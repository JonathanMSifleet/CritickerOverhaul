service: CritickerOverhaul
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-cloudfront-invalidate # must be last plugin

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    AGGREGATE_PERCENTILES_TABLE_NAME: ${self:custom.AggregatePercentilesTable.name}
    AUTH0_AUDIENCE: https://fl6lwlunp9.execute-api.eu-west-2.amazonaws.com/dev/signup
    AUTH0_ID: uftV0Jb8KRKl7rGzmzEZXPwIgoEr77tR
    AUTH0_PRIVATE_KEY: ${file(./privateKey.pem)}
    AUTH0_PUBLIC_KEY: ${file(./publicKey.pem)}
    AUTH0_URL: https://dev-btmyx7mm.eu.auth0.com/oauth/token
    AVATAR_TABLE_NAME: ${self:custom.AvatarTable.name}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    FILMS_TABLE_NAME: ${self:custom.FilmsTable.name}
    RATINGS_TABLE_NAME: ${self:custom.RatingsTable.name}
    REACT_BUCKET_NAME: ${self:custom.ReactBucket.name}
    TCI_TABLE_NAME: ${self:custom.TciTable.name}
    USER_TABLE_NAME: ${self:custom.UserTable.name}
  iam:
    role:
      statements:
        - ${file(aws/iam/AggregatePercentilesTableIAM.yml):AggregatePercentilesTableIAM}
        - ${file(aws/iam/AvatarTableIAM.yml):AvatarTableIAM}
        - ${file(aws/iam/FilmsTableIAM.yml):FilmsTableIAM}
        - ${file(aws/iam/RatingsTableIAM.yml):RatingsTableIAM}
        - ${file(aws/iam/TciTableIAM.yml):TciTableIAM}
        - ${file(aws/iam/UserTableIAM.yml):UserTableIAM}

package:
  individually: true

functions:
  deleteAccount:
    handler: aws/handlers/user/deleteAccount.handler
    events:
      - http:
          method: DELETE
          path: user/deleteAccount/{username}
          cors: true
          authorizer: ${self:custom.authoriser}
  deleteRating:
    handler: aws/handlers/rating/deleteRating.handler
    events:
      - http:
          method: DELETE
          path: rating/deleteRating/{imdbID}/{username}/{accessToken}
          cors: true
          authorizer: ${self:custom.authoriser}
  generateTCI:
    handler: aws/handlers/user/generateTCI.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: user/generateTCI/{usernameOne}/{usernameTwo}
          cors: true
  getAllRatings:
    handler: aws/handlers/rating/getAllRatings.handler
    timeout: 30
    events:
      - http:
          method: GET
          path: rating/getAllRatings/{username}
          cors: true
      - http:
          method: GET
          path: rating/getAllRatings/{username}/{lastEvaluatedKey}
          cors: true
  getFilmDetails:
    handler: aws/handlers/film/getFilmDetails.handler
    events:
      - http:
          method: GET
          path: film/getFilmDetails/{imdbID}
          cors: true
  getFilmRatings:
    handler: aws/handlers/film/getFilmRatings.handler
    events:
      - http:
          method: GET
          path: film/getFilmRatings/{imdbID}
          cors: true
      - http:
          method: GET
          path: film/getFilmRatings/{imdbID}/{username}
          cors: true
  getFilms:
    handler: aws/handlers/film/getFilms.handler
    events:
      - http:
          method: GET
          path: film/getFilms
          cors: true
  getNumRatings:
    handler: aws/handlers/user/getNumRatings.handler
    events:
      - http:
          method: GET
          path: user/getNumRatings/{username}
          cors: true
  getProfileByUsername:
    handler: aws/handlers/user/getProfileByUsername.handler
    events:
      - http:
          method: GET
          path: user/profile/{username}
          cors: true
  getUserAvatar:
    handler: aws/handlers/user/getUserAvatar.handler
    events:
      - http:
          method: GET
          path: user/avatar/{username}
          cors: true
  getRecentRatings:
    handler: aws/handlers/user/getRecentRatings.handler
    events:
      - http:
          method: GET
          path: user/getRecentRatings/{username}
          cors: true
  getUserRating:
    handler: aws/handlers/rating/getUserRating.handler
    events:
      - http:
          method: GET
          path: rating/getUserRating/{imdbID}/{username}
          cors: true
  importRatings:
    handler: aws/handlers/rating/importRatings.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: rating/importRatings/{username}
          cors: true
          authorizer: ${self:custom.authoriser}
  login:
    handler: aws/handlers/user/login.handler
    events:
      - http:
          method: POST
          path: user/login
          cors: true
  rateFilm:
    handler: aws/handlers/rating/rateFilm.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: rating/rateFilm/{username}
          cors: true
          authorizer: ${self:custom.authoriser}
  searchForFilm:
    handler: aws/handlers/film/searchForFilm.handler
    timeout: 30
    events:
      - http:
          method: GET
          path: film/searchForFilm/{queryString}
          cors: true
      - http:
          method: GET
          path: film/searchForFilm/{queryString}/{lastEvaluatedKey}
          cors: true
  signup:
    handler: aws/handlers/user/signup.handler
    events:
      - http:
          method: POST
          path: user/signup
          cors: true
  updateUserProfile:
    handler: aws/handlers/user/updateUserProfile.handler
    events:
      - http:
          method: PUT
          path: user/profile/{username}
          cors: true
          authorizer: ${self:custom.authoriser}
  uploadUserAvatar:
    handler: aws/handlers/user/uploadUserAvatar.handler
    events:
      - http:
          method: POST
          path: user/avatar/{username}
          cors: true
          authorizer: ${self:custom.authoriser}

  # dummy data functions:
  # addAccounts:
  #   handler: aws/handlers/mockData/addAccounts.handler
  #   timeout: 30
  #   events:
  #     - http:
  #         method: POST
  #         path: mockData/addAccounts
  #         cors: true
  aggregateUserPercentiles:
    handler: aws/handlers/mockData/aggregateUserPercentiles.handler
    timeout: 30
    events:
      - http:
          method: GET
          path: mockData/aggregateUserPercentiles/{username}
          cors: true
  # importAvatars:
  #   handler: aws/handlers/mockData/importAvatars.handler
  #   timeout: 30
  #   events:
  #     - http:
  #         method: POST
  #         path: mockData/importAvatars
  #         cors: true
  importGeneratedRatings:
    handler: aws/handlers/mockData/importGeneratedRatings.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: mockData/importGeneratedRatings
          cors: true
  updateNumRatings:
    handler: aws/handlers/mockData/updateNumRatings.handler
    timeout: 30
    events:
      - http:
          method: PUT
          path: mockData/importGeneratedRatings
          cors: true
  updatePercentiles:
    handler: aws/handlers/mockData/updatePercentiles.handler
    timeout: 30
    events:
      - http:
          method: PUT
          path: mockData/updatePercentiles/{username}
          cors: true

  # migration functions:
  # addPeople:
  #   handler: aws/handlers/mySQLMigration/addPeople.handler
  #   events:
  #     - http:
  #         method: PUT
  #         path: migration/addPeople/{type}
  #         cors: true
  # importFilmBatch:
  #   handler: aws/handlers/mySQLMigration/importFilmBatch.handler
  #   timeout: 30
  #   events:
  #     - http:
  #         method: POST
  #         path: migration/importFilmBatch
  #         cors: true

  # auth functions:
  authoriser:
    handler: aws/handlers/auth/authoriser.handler
  publicEndpoint:
    handler: aws/handlers/auth/public.handler
    events:
      - http:
          path: public
          method: POST
          cors: true
  privateEndpoint:
    handler: aws/handlers/auth/private.handler
    events:
      - http:
          path: private
          method: POST
          cors: true
          authorizer: ${self:custom.authoriser}
resources:
  Resources:
    AvatarTable: ${file(aws/resources/AvatarTable.yml):AvatarTable}
    FilmsTable: ${file(aws/resources/FilmsTable.yml):FilmsTable}
    RatingsTable: ${file(aws/resources/RatingsTable.yml):RatingsTable}
    ReactBucket: ${file(aws/resources/ReactBucket.yml):ReactBucket}
    ReactBucketPolicy: ${file(aws/resources/ReactBucket.yml):ReactBucketPolicy}
    TciTable: ${file(aws/resources/TciTable.yml):TciTable}
    AggregatePercentilesTable: ${file(aws/resources/AggregatePercentilesTable.yml):AggregatePercentilesTable}
    UserTable: ${file(aws/resources/UserTable.yml):UserTable}

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity for ${self:provider.stage} React Bucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: 'Criticker Overhaul distribution'
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            Compress: true
            DefaultTTL: 300
            ForwardedValues:
              QueryString: true
            TargetOriginId: ${self:custom.ReactBucketTargetOrigin.name}
            ViewerProtocolPolicy: 'redirect-to-https'
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - ReactBucket
                  - DomainName
              Id: ${self:custom.ReactBucketTargetOrigin.name}
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - origin-access-identity/cloudfront/
                      - Ref: CloudFrontOriginAccessIdentity
    # This response is needed for custom authorizer failures cors support
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

custom:
  AggregatePercentilesTable:
    name: !Ref AggregatePercentilesTable
    arn: !GetAtt AggregatePercentilesTable.Arn
  AvatarTable:
    name: !Ref AvatarTable
    arn: !GetAtt AvatarTable.Arn
  FilmsTable:
    name: !Ref FilmsTable
    arn: !GetAtt FilmsTable.Arn
  RatingsTable:
    name: !Ref RatingsTable
    arn: !GetAtt RatingsTable.Arn
  TciTable:
    name: !Ref TciTable
    arn: !GetAtt TciTable.Arn
  UserTable:
    name: !Ref UserTable
    arn: !GetAtt UserTable.Arn
  ReactBucket:
    name: react-bucket-x3blze4m-${self:provider.stage}
  BucketFolder:
    name: CritickerOverhaul
  ReactBucketTargetOrigin:
    name: S3-${self:custom.ReactBucket.name}/${self:custom.BucketFolder.name}
  authoriser: arn:aws:lambda:${aws:region}:${aws:accountId}:function:CritickerOverhaul-${self:provider.stage}-authoriser
  bundle:
    linting: true
  cloudfrontInvalidate:
    - distributionId: 'E25ASI4SIUBGJK'
      autoInvalidate: true
      items:
        - '/*'
  webpack:
    webpackConfig: ./webpack.config.js
